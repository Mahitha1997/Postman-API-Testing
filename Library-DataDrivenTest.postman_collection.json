{
	"info": {
		"_postman_id": "31701ffa-752b-44d5-b8fa-300db6fe0aed",
		"name": "Library -Data Driven Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42529690"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"const bookId = jsonData.ID; \r",
							"//fetch the value from response body and set it as a collection level variable\r",
							"pm.collectionVariables.set(\"book_id\", bookId);\r",
							"\r",
							"//To check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//To validate a value in json response body\r",
							"pm.test(\"Verify Book is succesfully added\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"Msg\");\r",
							"    pm.expect(jsonData.Msg).to.eql(\"successfully added\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 8000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(8000);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate headers\", function(){\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json;charset=UTF-8\");\r",
							"})\r",
							"\r",
							"pm.test(\"Response Body matches string\", function () {\r",
							"    //entire json response body will be returned back as string using pm.response.text()\r",
							"    //entire json response body will be returned as json object using pm.response.json()\r",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate ID is the concatination of isbn and aisle\", function(){\r",
							"    const requestBody = pm.request.body.raw;\r",
							"    const parsedRequestBody = JSON.parse(requestBody);\r",
							"    const aisle_id= parsedRequestBody.aisle;\r",
							"    const isbn_id= pm.collectionVariables.get(\"isbn\");\r",
							"    expectedbookid = isbn_id + aisle_id;\r",
							"    pm.expect(expectedbookid).to.eql(bookId)\r",
							"\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.collectionVariables.get(\"companyCode\");\r",
							"const randomNum = Math.floor(Math.random()*10000);\r",
							"//console.log(randomNum);\r",
							"const isbn = code + randomNum;\r",
							"//console.log(isbn);\r",
							"pm.collectionVariables.set(\"isbn\", isbn)\r",
							"\r",
							"pm.collectionVariables.set(\"bookName\", pm.iterationData.get(\"Book_Name\"));\r",
							"pm.collectionVariables.set(\"authorName\", pm.iterationData.get(\"Author_Name\"));\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\":\"{{bookName}}\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"2272\",\r\n\"author\":\"{{authorName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Library/Addbook.php",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema =\r",
							"\t{\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Validate JSON response schema\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://rahulshettyacademy.com/Library/GetBook.php?ID={{book_id}}",
					"protocol": "https",
					"host": [
						"rahulshettyacademy",
						"com"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Body matches string\", function () {\r",
							"    //entire json response body will be returned back as string using pm.response.text()\r",
							"    //entire json response body will be returned as json object using pm.response.json()\r",
							"    pm.expect(pm.response.text()).to.include(\"book is successfully deleted\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n\"ID\" : \"{{book_id}}\"\r\n \r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://rahulshettyacademy.com/Library/DeleteBook.php",
					"protocol": "https",
					"host": [
						"rahulshettyacademy",
						"com"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "companyCode",
			"value": "RS",
			"type": "string"
		},
		{
			"key": "isbn",
			"value": ""
		},
		{
			"key": "book_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookName",
			"value": ""
		},
		{
			"key": "authorName",
			"value": "",
			"type": "string"
		}
	]
}
